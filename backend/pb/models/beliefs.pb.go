// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.0
// source: proto/models/beliefs.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A confidence rating on a belief represents
// a score that determines how likely the system
// evaluates the belief to be given available evidence.
type ConfidenceRating struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfidenceScore float64 `protobuf:"fixed64,1,opt,name=confidence_score,json=confidenceScore,proto3" json:"confidence_score,omitempty"` // The confidence score of the belief.
	Default         bool    `protobuf:"varint,2,opt,name=default,proto3" json:"default,omitempty"`                                         // Whether this confidence rating is the default.
}

func (x *ConfidenceRating) Reset() {
	*x = ConfidenceRating{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_models_beliefs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfidenceRating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfidenceRating) ProtoMessage() {}

func (x *ConfidenceRating) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_beliefs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfidenceRating.ProtoReflect.Descriptor instead.
func (*ConfidenceRating) Descriptor() ([]byte, []int) {
	return file_proto_models_beliefs_proto_rawDescGZIP(), []int{0}
}

func (x *ConfidenceRating) GetConfidenceScore() float64 {
	if x != nil {
		return x.ConfidenceScore
	}
	return 0
}

func (x *ConfidenceRating) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

// A Source of a belief represents
// the data or object from which the belief
// was generated.
type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_models_beliefs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_beliefs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_proto_models_beliefs_proto_rawDescGZIP(), []int{1}
}

// The content of a belief represents
// what that belief is about, through
// natural language.
type Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawStr string `protobuf:"bytes,1,opt,name=raw_str,json=rawStr,proto3" json:"raw_str,omitempty"` // The raw string representation of the belief content.
}

func (x *Content) Reset() {
	*x = Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_models_beliefs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_beliefs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_proto_models_beliefs_proto_rawDescGZIP(), []int{2}
}

func (x *Content) GetRawStr() string {
	if x != nil {
		return x.RawStr
	}
	return ""
}

// The evidence associated with a belief
// is some external object that can be used
// to update the confidence in a belief.
type Evidence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Evidence) Reset() {
	*x = Evidence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_models_beliefs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Evidence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Evidence) ProtoMessage() {}

func (x *Evidence) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_beliefs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Evidence.ProtoReflect.Descriptor instead.
func (*Evidence) Descriptor() ([]byte, []int) {
	return file_proto_models_beliefs_proto_rawDescGZIP(), []int{3}
}

// A belief represents some synthesis
// or general model of what the user believes.
// It originates from some source. A belief is
// by its nature temporal information with a
// start and end time during which it can be
// considered effective. A belief can be versioned
// over time as it is updated by a user. All updates
// to a belief are set with some backdated older date
// overlapping prior dates and (typically) a future
// facing forward date that represents unbounded future
// time. A belief can be made explicitly inactive
// using the is_active field through an explicit action.
type Belief struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                // Unique identifier for the belief.
	UserId             string              `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                          // Identifier for the user who holds the belief.
	Version            int32               `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`                                                     // Version number of the belief.
	DialecticId        string              `protobuf:"bytes,4,opt,name=dialectic_id,json=dialecticId,proto3" json:"dialectic_id,omitempty"`                           // Identifier for the associated dialectic.
	ConfidenceRatings  []*ConfidenceRating `protobuf:"bytes,5,rep,name=confidence_ratings,json=confidenceRatings,proto3" json:"confidence_ratings,omitempty"`         // Confidence ratings of the belief.
	StartTimeMillisUtc int64               `protobuf:"varint,6,opt,name=start_time_millis_utc,json=startTimeMillisUtc,proto3" json:"start_time_millis_utc,omitempty"` // Start time of the belief's validity.
	EndTimeMillisUtc   int64               `protobuf:"varint,7,opt,name=end_time_millis_utc,json=endTimeMillisUtc,proto3" json:"end_time_millis_utc,omitempty"`       // End time of the belief's validity.
	Sources            []*Source           `protobuf:"bytes,8,rep,name=sources,proto3" json:"sources,omitempty"`                                                      // Sources from which the belief is derived.
	Content            []*Content          `protobuf:"bytes,9,rep,name=content,proto3" json:"content,omitempty"`                                                      // Content of the belief.
	Evidence           []*Evidence         `protobuf:"bytes,10,rep,name=evidence,proto3" json:"evidence,omitempty"`                                                   // Evidence supporting the belief.
	IsActive           bool                `protobuf:"varint,11,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`                                  // Indicates if the belief is currently active.
}

func (x *Belief) Reset() {
	*x = Belief{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_models_beliefs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Belief) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Belief) ProtoMessage() {}

func (x *Belief) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_beliefs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Belief.ProtoReflect.Descriptor instead.
func (*Belief) Descriptor() ([]byte, []int) {
	return file_proto_models_beliefs_proto_rawDescGZIP(), []int{4}
}

func (x *Belief) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Belief) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Belief) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Belief) GetDialecticId() string {
	if x != nil {
		return x.DialecticId
	}
	return ""
}

func (x *Belief) GetConfidenceRatings() []*ConfidenceRating {
	if x != nil {
		return x.ConfidenceRatings
	}
	return nil
}

func (x *Belief) GetStartTimeMillisUtc() int64 {
	if x != nil {
		return x.StartTimeMillisUtc
	}
	return 0
}

func (x *Belief) GetEndTimeMillisUtc() int64 {
	if x != nil {
		return x.EndTimeMillisUtc
	}
	return 0
}

func (x *Belief) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *Belief) GetContent() []*Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Belief) GetEvidence() []*Evidence {
	if x != nil {
		return x.Evidence
	}
	return nil
}

func (x *Belief) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

// A belief system represents a quick synthesis of a user's
// beliefs into a compressed natural language representation
// of the user's worldview. This belief system can be used
// to initiate further dialectical questions to gain better
// understanding of a user's beliefs.
type BeliefSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawStr string `protobuf:"bytes,1,opt,name=raw_str,json=rawStr,proto3" json:"raw_str,omitempty"` // The raw string representation of the belief system.
}

func (x *BeliefSystem) Reset() {
	*x = BeliefSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_models_beliefs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeliefSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeliefSystem) ProtoMessage() {}

func (x *BeliefSystem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_beliefs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeliefSystem.ProtoReflect.Descriptor instead.
func (*BeliefSystem) Descriptor() ([]byte, []int) {
	return file_proto_models_beliefs_proto_rawDescGZIP(), []int{5}
}

func (x *BeliefSystem) GetRawStr() string {
	if x != nil {
		return x.RawStr
	}
	return ""
}

var File_proto_models_beliefs_proto protoreflect.FileDescriptor

var file_proto_models_beliefs_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x62,
	0x65, 0x6c, 0x69, 0x65, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x08, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x22, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61,
	0x77, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x61, 0x77,
	0x53, 0x74, 0x72, 0x22, 0x0a, 0x0a, 0x08, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x22,
	0x9d, 0x03, 0x0a, 0x06, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x49, 0x64,
	0x12, 0x40, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x55, 0x74, 0x63, 0x12, 0x2d, 0x0a, 0x13, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69,
	0x73, 0x55, 0x74, 0x63, 0x12, 0x21, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x08, 0x65,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22,
	0x27, 0x0a, 0x0c, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x61, 0x77, 0x53, 0x74, 0x72, 0x42, 0x20, 0x5a, 0x1e, 0x65, 0x70, 0x69, 0x73,
	0x74, 0x65, 0x6d, 0x69, 0x63, 0x2d, 0x6d, 0x65, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2f, 0x70, 0x62, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_models_beliefs_proto_rawDescOnce sync.Once
	file_proto_models_beliefs_proto_rawDescData = file_proto_models_beliefs_proto_rawDesc
)

func file_proto_models_beliefs_proto_rawDescGZIP() []byte {
	file_proto_models_beliefs_proto_rawDescOnce.Do(func() {
		file_proto_models_beliefs_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_models_beliefs_proto_rawDescData)
	})
	return file_proto_models_beliefs_proto_rawDescData
}

var file_proto_models_beliefs_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_models_beliefs_proto_goTypes = []any{
	(*ConfidenceRating)(nil), // 0: ConfidenceRating
	(*Source)(nil),           // 1: Source
	(*Content)(nil),          // 2: Content
	(*Evidence)(nil),         // 3: Evidence
	(*Belief)(nil),           // 4: Belief
	(*BeliefSystem)(nil),     // 5: BeliefSystem
}
var file_proto_models_beliefs_proto_depIdxs = []int32{
	0, // 0: Belief.confidence_ratings:type_name -> ConfidenceRating
	1, // 1: Belief.sources:type_name -> Source
	2, // 2: Belief.content:type_name -> Content
	3, // 3: Belief.evidence:type_name -> Evidence
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_models_beliefs_proto_init() }
func file_proto_models_beliefs_proto_init() {
	if File_proto_models_beliefs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_models_beliefs_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ConfidenceRating); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_models_beliefs_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_models_beliefs_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_models_beliefs_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Evidence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_models_beliefs_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Belief); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_models_beliefs_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*BeliefSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_models_beliefs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_models_beliefs_proto_goTypes,
		DependencyIndexes: file_proto_models_beliefs_proto_depIdxs,
		MessageInfos:      file_proto_models_beliefs_proto_msgTypes,
	}.Build()
	File_proto_models_beliefs_proto = out.File
	file_proto_models_beliefs_proto_rawDesc = nil
	file_proto_models_beliefs_proto_goTypes = nil
	file_proto_models_beliefs_proto_depIdxs = nil
}
