// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.27.1
// source: proto/epistemic_me.proto

package pb

import (
	models "epistemic-me-backend/pb/models"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for listing beliefs.
type ListBeliefsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // The ID of the user whose beliefs are being listed.
	BeliefIds []string `protobuf:"bytes,2,rep,name=belief_ids,json=beliefIds,proto3" json:"belief_ids,omitempty"` // Optional list of belief IDs to filter by.
}

func (x *ListBeliefsRequest) Reset() {
	*x = ListBeliefsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_epistemic_me_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBeliefsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBeliefsRequest) ProtoMessage() {}

func (x *ListBeliefsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_epistemic_me_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBeliefsRequest.ProtoReflect.Descriptor instead.
func (*ListBeliefsRequest) Descriptor() ([]byte, []int) {
	return file_proto_epistemic_me_proto_rawDescGZIP(), []int{0}
}

func (x *ListBeliefsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListBeliefsRequest) GetBeliefIds() []string {
	if x != nil {
		return x.BeliefIds
	}
	return nil
}

// Response message for listing beliefs.
type ListBeliefsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beliefs      []*models.Belief     `protobuf:"bytes,1,rep,name=beliefs,proto3" json:"beliefs,omitempty"`                               // List of beliefs for the user.
	BeliefSystem *models.BeliefSystem `protobuf:"bytes,2,opt,name=belief_system,json=beliefSystem,proto3" json:"belief_system,omitempty"` // The belief system summary.
}

func (x *ListBeliefsResponse) Reset() {
	*x = ListBeliefsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_epistemic_me_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBeliefsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBeliefsResponse) ProtoMessage() {}

func (x *ListBeliefsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_epistemic_me_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBeliefsResponse.ProtoReflect.Descriptor instead.
func (*ListBeliefsResponse) Descriptor() ([]byte, []int) {
	return file_proto_epistemic_me_proto_rawDescGZIP(), []int{1}
}

func (x *ListBeliefsResponse) GetBeliefs() []*models.Belief {
	if x != nil {
		return x.Beliefs
	}
	return nil
}

func (x *ListBeliefsResponse) GetBeliefSystem() *models.BeliefSystem {
	if x != nil {
		return x.BeliefSystem
	}
	return nil
}

// Request message for creating a new belief.
type CreateBeliefRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                      // The ID of the user creating the belief.
	BeliefContent string `protobuf:"bytes,2,opt,name=belief_content,json=beliefContent,proto3" json:"belief_content,omitempty"` // The belief being created.
}

func (x *CreateBeliefRequest) Reset() {
	*x = CreateBeliefRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_epistemic_me_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBeliefRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBeliefRequest) ProtoMessage() {}

func (x *CreateBeliefRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_epistemic_me_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBeliefRequest.ProtoReflect.Descriptor instead.
func (*CreateBeliefRequest) Descriptor() ([]byte, []int) {
	return file_proto_epistemic_me_proto_rawDescGZIP(), []int{2}
}

func (x *CreateBeliefRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateBeliefRequest) GetBeliefContent() string {
	if x != nil {
		return x.BeliefContent
	}
	return ""
}

// Response message for creating a new belief.
type CreateBeliefResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Belief       *models.Belief       `protobuf:"bytes,1,opt,name=belief,proto3" json:"belief,omitempty"`                                 // The created belief.
	BeliefSystem *models.BeliefSystem `protobuf:"bytes,2,opt,name=belief_system,json=beliefSystem,proto3" json:"belief_system,omitempty"` // The updated belief system summary.
}

func (x *CreateBeliefResponse) Reset() {
	*x = CreateBeliefResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_epistemic_me_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBeliefResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBeliefResponse) ProtoMessage() {}

func (x *CreateBeliefResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_epistemic_me_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBeliefResponse.ProtoReflect.Descriptor instead.
func (*CreateBeliefResponse) Descriptor() ([]byte, []int) {
	return file_proto_epistemic_me_proto_rawDescGZIP(), []int{3}
}

func (x *CreateBeliefResponse) GetBelief() *models.Belief {
	if x != nil {
		return x.Belief
	}
	return nil
}

func (x *CreateBeliefResponse) GetBeliefSystem() *models.BeliefSystem {
	if x != nil {
		return x.BeliefSystem
	}
	return nil
}

// Request message for creating a new dialectic.
type CreateDialecticRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string               `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                          // The ID of the user for whom the dialectic is being created.
	DialecticType models.DialecticType `protobuf:"varint,2,opt,name=dialectic_type,json=dialecticType,proto3,enum=DialecticType" json:"dialectic_type,omitempty"` // The type of dialectic being created.
}

func (x *CreateDialecticRequest) Reset() {
	*x = CreateDialecticRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_epistemic_me_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDialecticRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDialecticRequest) ProtoMessage() {}

func (x *CreateDialecticRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_epistemic_me_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDialecticRequest.ProtoReflect.Descriptor instead.
func (*CreateDialecticRequest) Descriptor() ([]byte, []int) {
	return file_proto_epistemic_me_proto_rawDescGZIP(), []int{4}
}

func (x *CreateDialecticRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateDialecticRequest) GetDialecticType() models.DialecticType {
	if x != nil {
		return x.DialecticType
	}
	return models.DialecticType(0)
}

// Response message for creating a new dialectic.
type CreateDialecticResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DialecticId string            `protobuf:"bytes,1,opt,name=dialectic_id,json=dialecticId,proto3" json:"dialectic_id,omitempty"` // Unique identifier for the created dialectic.
	Dialectic   *models.Dialectic `protobuf:"bytes,2,opt,name=dialectic,proto3" json:"dialectic,omitempty"`                        // The created dialectic.
}

func (x *CreateDialecticResponse) Reset() {
	*x = CreateDialecticResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_epistemic_me_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDialecticResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDialecticResponse) ProtoMessage() {}

func (x *CreateDialecticResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_epistemic_me_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDialecticResponse.ProtoReflect.Descriptor instead.
func (*CreateDialecticResponse) Descriptor() ([]byte, []int) {
	return file_proto_epistemic_me_proto_rawDescGZIP(), []int{5}
}

func (x *CreateDialecticResponse) GetDialecticId() string {
	if x != nil {
		return x.DialecticId
	}
	return ""
}

func (x *CreateDialecticResponse) GetDialectic() *models.Dialectic {
	if x != nil {
		return x.Dialectic
	}
	return nil
}

// Request message for listing dialectics.
type ListDialecticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // The ID of the user whose dialectics are being listed.
}

func (x *ListDialecticsRequest) Reset() {
	*x = ListDialecticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_epistemic_me_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDialecticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDialecticsRequest) ProtoMessage() {}

func (x *ListDialecticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_epistemic_me_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDialecticsRequest.ProtoReflect.Descriptor instead.
func (*ListDialecticsRequest) Descriptor() ([]byte, []int) {
	return file_proto_epistemic_me_proto_rawDescGZIP(), []int{6}
}

func (x *ListDialecticsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Response message for listing dialectics.
type ListDialecticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dialectics []*models.Dialectic `protobuf:"bytes,1,rep,name=dialectics,proto3" json:"dialectics,omitempty"` // List of dialectics for the user.
}

func (x *ListDialecticsResponse) Reset() {
	*x = ListDialecticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_epistemic_me_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDialecticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDialecticsResponse) ProtoMessage() {}

func (x *ListDialecticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_epistemic_me_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDialecticsResponse.ProtoReflect.Descriptor instead.
func (*ListDialecticsResponse) Descriptor() ([]byte, []int) {
	return file_proto_epistemic_me_proto_rawDescGZIP(), []int{7}
}

func (x *ListDialecticsResponse) GetDialectics() []*models.Dialectic {
	if x != nil {
		return x.Dialectics
	}
	return nil
}

// Request message for updating an existing dialectic.
type UpdateDialecticRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DialecticId string             `protobuf:"bytes,1,opt,name=dialectic_id,json=dialecticId,proto3" json:"dialectic_id,omitempty"` // The ID of the dialectic being updated.
	Answer      *models.UserAnswer `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`                              // The user's answer to the dialectic.
	UserId      string             `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                // The ID of the user whose dialectic is being updated.
	DryRun      bool               `protobuf:"varint,4,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`               // Whether to perform a dry run of the dialectic.
}

func (x *UpdateDialecticRequest) Reset() {
	*x = UpdateDialecticRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_epistemic_me_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDialecticRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDialecticRequest) ProtoMessage() {}

func (x *UpdateDialecticRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_epistemic_me_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDialecticRequest.ProtoReflect.Descriptor instead.
func (*UpdateDialecticRequest) Descriptor() ([]byte, []int) {
	return file_proto_epistemic_me_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateDialecticRequest) GetDialecticId() string {
	if x != nil {
		return x.DialecticId
	}
	return ""
}

func (x *UpdateDialecticRequest) GetAnswer() *models.UserAnswer {
	if x != nil {
		return x.Answer
	}
	return nil
}

func (x *UpdateDialecticRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateDialecticRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

// Response message for updating an existing dialectic.
type UpdateDialecticResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dialectic *models.Dialectic `protobuf:"bytes,1,opt,name=dialectic,proto3" json:"dialectic,omitempty"` // The updated dialectic.
}

func (x *UpdateDialecticResponse) Reset() {
	*x = UpdateDialecticResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_epistemic_me_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDialecticResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDialecticResponse) ProtoMessage() {}

func (x *UpdateDialecticResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_epistemic_me_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDialecticResponse.ProtoReflect.Descriptor instead.
func (*UpdateDialecticResponse) Descriptor() ([]byte, []int) {
	return file_proto_epistemic_me_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateDialecticResponse) GetDialectic() *models.Dialectic {
	if x != nil {
		return x.Dialectic
	}
	return nil
}

var File_proto_epistemic_me_proto protoreflect.FileDescriptor

var file_proto_epistemic_me_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x70, 0x69, 0x73, 0x74, 0x65, 0x6d, 0x69,
	0x63, 0x5f, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x6c, 0x69,
	0x65, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x49,
	0x64, 0x73, 0x22, 0x6c, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x62, 0x65, 0x6c,
	0x69, 0x65, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x42, 0x65, 0x6c,
	0x69, 0x65, 0x66, 0x52, 0x07, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x73, 0x12, 0x32, 0x0a, 0x0d,
	0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x52, 0x0c, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x22, 0x55, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x6b, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x06, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x07, 0x2e, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x52, 0x06, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66,
	0x12, 0x32, 0x0a, 0x0d, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x22, 0x68, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69,
	0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0e, 0x64, 0x69, 0x61, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x22, 0x66,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x61,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x09,
	0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x52, 0x09, 0x64, 0x69, 0x61,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x22, 0x30, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69,
	0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x63, 0x52, 0x0a, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x73, 0x22, 0x92,
	0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x61,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x06,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72,
	0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79,
	0x52, 0x75, 0x6e, 0x22, 0x43, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x09, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x52, 0x09, 0x64,
	0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x32, 0xe4, 0x02, 0x0a, 0x12, 0x45, 0x70, 0x69,
	0x73, 0x74, 0x65, 0x6d, 0x69, 0x63, 0x4d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x3d, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x12,
	0x14, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65,
	0x6c, 0x69, 0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x73, 0x12, 0x13, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x12, 0x17, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x16, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x12, 0x17, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x1a, 0x5a, 0x18, 0x65, 0x70, 0x69, 0x73, 0x74, 0x65, 0x6d, 0x69, 0x63, 0x2d, 0x6d, 0x65, 0x2d,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x62, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_epistemic_me_proto_rawDescOnce sync.Once
	file_proto_epistemic_me_proto_rawDescData = file_proto_epistemic_me_proto_rawDesc
)

func file_proto_epistemic_me_proto_rawDescGZIP() []byte {
	file_proto_epistemic_me_proto_rawDescOnce.Do(func() {
		file_proto_epistemic_me_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_epistemic_me_proto_rawDescData)
	})
	return file_proto_epistemic_me_proto_rawDescData
}

var file_proto_epistemic_me_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_epistemic_me_proto_goTypes = []interface{}{
	(*ListBeliefsRequest)(nil),      // 0: ListBeliefsRequest
	(*ListBeliefsResponse)(nil),     // 1: ListBeliefsResponse
	(*CreateBeliefRequest)(nil),     // 2: CreateBeliefRequest
	(*CreateBeliefResponse)(nil),    // 3: CreateBeliefResponse
	(*CreateDialecticRequest)(nil),  // 4: CreateDialecticRequest
	(*CreateDialecticResponse)(nil), // 5: CreateDialecticResponse
	(*ListDialecticsRequest)(nil),   // 6: ListDialecticsRequest
	(*ListDialecticsResponse)(nil),  // 7: ListDialecticsResponse
	(*UpdateDialecticRequest)(nil),  // 8: UpdateDialecticRequest
	(*UpdateDialecticResponse)(nil), // 9: UpdateDialecticResponse
	(*models.Belief)(nil),           // 10: Belief
	(*models.BeliefSystem)(nil),     // 11: BeliefSystem
	(models.DialecticType)(0),       // 12: DialecticType
	(*models.Dialectic)(nil),        // 13: Dialectic
	(*models.UserAnswer)(nil),       // 14: UserAnswer
}
var file_proto_epistemic_me_proto_depIdxs = []int32{
	10, // 0: ListBeliefsResponse.beliefs:type_name -> Belief
	11, // 1: ListBeliefsResponse.belief_system:type_name -> BeliefSystem
	10, // 2: CreateBeliefResponse.belief:type_name -> Belief
	11, // 3: CreateBeliefResponse.belief_system:type_name -> BeliefSystem
	12, // 4: CreateDialecticRequest.dialectic_type:type_name -> DialecticType
	13, // 5: CreateDialecticResponse.dialectic:type_name -> Dialectic
	13, // 6: ListDialecticsResponse.dialectics:type_name -> Dialectic
	14, // 7: UpdateDialecticRequest.answer:type_name -> UserAnswer
	13, // 8: UpdateDialecticResponse.dialectic:type_name -> Dialectic
	2,  // 9: EpistemicMeService.CreateBelief:input_type -> CreateBeliefRequest
	0,  // 10: EpistemicMeService.ListBeliefs:input_type -> ListBeliefsRequest
	4,  // 11: EpistemicMeService.CreateDialectic:input_type -> CreateDialecticRequest
	6,  // 12: EpistemicMeService.ListDialectics:input_type -> ListDialecticsRequest
	8,  // 13: EpistemicMeService.UpdateDialectic:input_type -> UpdateDialecticRequest
	3,  // 14: EpistemicMeService.CreateBelief:output_type -> CreateBeliefResponse
	1,  // 15: EpistemicMeService.ListBeliefs:output_type -> ListBeliefsResponse
	5,  // 16: EpistemicMeService.CreateDialectic:output_type -> CreateDialecticResponse
	7,  // 17: EpistemicMeService.ListDialectics:output_type -> ListDialecticsResponse
	9,  // 18: EpistemicMeService.UpdateDialectic:output_type -> UpdateDialecticResponse
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_proto_epistemic_me_proto_init() }
func file_proto_epistemic_me_proto_init() {
	if File_proto_epistemic_me_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_epistemic_me_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBeliefsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_epistemic_me_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBeliefsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_epistemic_me_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBeliefRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_epistemic_me_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBeliefResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_epistemic_me_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDialecticRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_epistemic_me_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDialecticResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_epistemic_me_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDialecticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_epistemic_me_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDialecticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_epistemic_me_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDialecticRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_epistemic_me_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDialecticResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_epistemic_me_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_epistemic_me_proto_goTypes,
		DependencyIndexes: file_proto_epistemic_me_proto_depIdxs,
		MessageInfos:      file_proto_epistemic_me_proto_msgTypes,
	}.Build()
	File_proto_epistemic_me_proto = out.File
	file_proto_epistemic_me_proto_rawDesc = nil
	file_proto_epistemic_me_proto_goTypes = nil
	file_proto_epistemic_me_proto_depIdxs = nil
}
