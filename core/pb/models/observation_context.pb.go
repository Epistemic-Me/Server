// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.27.1
// source: proto/models/observation_context.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum for the type of input
type InputType int32

const (
	InputType_HABIT                InputType = 0
	InputType_BELIEF_SYSTEM_OUTPUT InputType = 1
	InputType_CAUSAL_BELIEF        InputType = 2
)

// Enum value maps for InputType.
var (
	InputType_name = map[int32]string{
		0: "HABIT",
		1: "BELIEF_SYSTEM_OUTPUT",
		2: "CAUSAL_BELIEF",
	}
	InputType_value = map[string]int32{
		"HABIT":                0,
		"BELIEF_SYSTEM_OUTPUT": 1,
		"CAUSAL_BELIEF":        2,
	}
)

func (x InputType) Enum() *InputType {
	p := new(InputType)
	*p = x
	return p
}

func (x InputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InputType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_models_observation_context_proto_enumTypes[0].Descriptor()
}

func (InputType) Type() protoreflect.EnumType {
	return &file_proto_models_observation_context_proto_enumTypes[0]
}

func (x InputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InputType.Descriptor instead.
func (InputType) EnumDescriptor() ([]byte, []int) {
	return file_proto_models_observation_context_proto_rawDescGZIP(), []int{0}
}

// Enum for the type of output
type OutputType int32

const (
	OutputType_RESOURCE          OutputType = 0
	OutputType_NEW_HABIT         OutputType = 1
	OutputType_NEW_CAUSAL_BELIEF OutputType = 2
)

// Enum value maps for OutputType.
var (
	OutputType_name = map[int32]string{
		0: "RESOURCE",
		1: "NEW_HABIT",
		2: "NEW_CAUSAL_BELIEF",
	}
	OutputType_value = map[string]int32{
		"RESOURCE":          0,
		"NEW_HABIT":         1,
		"NEW_CAUSAL_BELIEF": 2,
	}
)

func (x OutputType) Enum() *OutputType {
	p := new(OutputType)
	*p = x
	return p
}

func (x OutputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutputType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_models_observation_context_proto_enumTypes[1].Descriptor()
}

func (OutputType) Type() protoreflect.EnumType {
	return &file_proto_models_observation_context_proto_enumTypes[1]
}

func (x OutputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OutputType.Descriptor instead.
func (OutputType) EnumDescriptor() ([]byte, []int) {
	return file_proto_models_observation_context_proto_rawDescGZIP(), []int{1}
}

// Message representing an input for an observation context
type Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                 // Name of the input
	Type InputType `protobuf:"varint,2,opt,name=type,proto3,enum=InputType" json:"type,omitempty"` // Type of the input
	// Types that are assignable to InputDetail:
	//
	//	*Input_HabitId
	//	*Input_BeliefSystemId
	//	*Input_CausalBeliefId
	InputDetail isInput_InputDetail `protobuf_oneof:"input_detail"`
}

func (x *Input) Reset() {
	*x = Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_models_observation_context_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input) ProtoMessage() {}

func (x *Input) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_observation_context_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input.ProtoReflect.Descriptor instead.
func (*Input) Descriptor() ([]byte, []int) {
	return file_proto_models_observation_context_proto_rawDescGZIP(), []int{0}
}

func (x *Input) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Input) GetType() InputType {
	if x != nil {
		return x.Type
	}
	return InputType_HABIT
}

func (m *Input) GetInputDetail() isInput_InputDetail {
	if m != nil {
		return m.InputDetail
	}
	return nil
}

func (x *Input) GetHabitId() int32 {
	if x, ok := x.GetInputDetail().(*Input_HabitId); ok {
		return x.HabitId
	}
	return 0
}

func (x *Input) GetBeliefSystemId() int32 {
	if x, ok := x.GetInputDetail().(*Input_BeliefSystemId); ok {
		return x.BeliefSystemId
	}
	return 0
}

func (x *Input) GetCausalBeliefId() int32 {
	if x, ok := x.GetInputDetail().(*Input_CausalBeliefId); ok {
		return x.CausalBeliefId
	}
	return 0
}

type isInput_InputDetail interface {
	isInput_InputDetail()
}

type Input_HabitId struct {
	HabitId int32 `protobuf:"varint,3,opt,name=habit_id,json=habitId,proto3,oneof"` // Reference to a habit
}

type Input_BeliefSystemId struct {
	BeliefSystemId int32 `protobuf:"varint,4,opt,name=belief_system_id,json=beliefSystemId,proto3,oneof"` // Reference to a belief system output
}

type Input_CausalBeliefId struct {
	CausalBeliefId int32 `protobuf:"varint,5,opt,name=causal_belief_id,json=causalBeliefId,proto3,oneof"` // Reference to a specific causal belief
}

func (*Input_HabitId) isInput_InputDetail() {}

func (*Input_BeliefSystemId) isInput_InputDetail() {}

func (*Input_CausalBeliefId) isInput_InputDetail() {}

// Message representing an output for an observation context
type Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                  // Name of the output
	Type OutputType `protobuf:"varint,2,opt,name=type,proto3,enum=OutputType" json:"type,omitempty"` // Type of the output
	// Types that are assignable to OutputDetail:
	//
	//	*Output_Resource
	//	*Output_NewHabitId
	//	*Output_NewCausalBeliefId
	OutputDetail isOutput_OutputDetail `protobuf_oneof:"output_detail"`
}

func (x *Output) Reset() {
	*x = Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_models_observation_context_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output) ProtoMessage() {}

func (x *Output) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_observation_context_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output.ProtoReflect.Descriptor instead.
func (*Output) Descriptor() ([]byte, []int) {
	return file_proto_models_observation_context_proto_rawDescGZIP(), []int{1}
}

func (x *Output) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Output) GetType() OutputType {
	if x != nil {
		return x.Type
	}
	return OutputType_RESOURCE
}

func (m *Output) GetOutputDetail() isOutput_OutputDetail {
	if m != nil {
		return m.OutputDetail
	}
	return nil
}

func (x *Output) GetResource() *Resource {
	if x, ok := x.GetOutputDetail().(*Output_Resource); ok {
		return x.Resource
	}
	return nil
}

func (x *Output) GetNewHabitId() int32 {
	if x, ok := x.GetOutputDetail().(*Output_NewHabitId); ok {
		return x.NewHabitId
	}
	return 0
}

func (x *Output) GetNewCausalBeliefId() int32 {
	if x, ok := x.GetOutputDetail().(*Output_NewCausalBeliefId); ok {
		return x.NewCausalBeliefId
	}
	return 0
}

type isOutput_OutputDetail interface {
	isOutput_OutputDetail()
}

type Output_Resource struct {
	Resource *Resource `protobuf:"bytes,3,opt,name=resource,proto3,oneof"` // Reference to a resource
}

type Output_NewHabitId struct {
	NewHabitId int32 `protobuf:"varint,4,opt,name=new_habit_id,json=newHabitId,proto3,oneof"` // Reference to a new habit
}

type Output_NewCausalBeliefId struct {
	NewCausalBeliefId int32 `protobuf:"varint,5,opt,name=new_causal_belief_id,json=newCausalBeliefId,proto3,oneof"` // Reference to a new causal belief
}

func (*Output_Resource) isOutput_OutputDetail() {}

func (*Output_NewHabitId) isOutput_OutputDetail() {}

func (*Output_NewCausalBeliefId) isOutput_OutputDetail() {}

// Message representing an observation context
type ObservationContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       int32                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                     string                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description              string                    `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	PossibleStates           []*PossibleState          `protobuf:"bytes,4,rep,name=possible_states,json=possibleStates,proto3" json:"possible_states,omitempty"`
	ConditionalProbabilities []*ConditionalProbability `protobuf:"bytes,5,rep,name=conditional_probabilities,json=conditionalProbabilities,proto3" json:"conditional_probabilities,omitempty"` // Conditional probabilities
	Inputs                   []*Input                  `protobuf:"bytes,6,rep,name=inputs,proto3" json:"inputs,omitempty"`                                                                     // Inputs for this context
	Outputs                  []*Output                 `protobuf:"bytes,7,rep,name=outputs,proto3" json:"outputs,omitempty"`                                                                   // Outputs for this context
	TemporalInformation      *TemporalInformation      `protobuf:"bytes,8,opt,name=temporal_information,json=temporalInformation,proto3" json:"temporal_information,omitempty"`                // Temporal information
}

func (x *ObservationContext) Reset() {
	*x = ObservationContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_models_observation_context_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationContext) ProtoMessage() {}

func (x *ObservationContext) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_observation_context_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationContext.ProtoReflect.Descriptor instead.
func (*ObservationContext) Descriptor() ([]byte, []int) {
	return file_proto_models_observation_context_proto_rawDescGZIP(), []int{2}
}

func (x *ObservationContext) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ObservationContext) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ObservationContext) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ObservationContext) GetPossibleStates() []*PossibleState {
	if x != nil {
		return x.PossibleStates
	}
	return nil
}

func (x *ObservationContext) GetConditionalProbabilities() []*ConditionalProbability {
	if x != nil {
		return x.ConditionalProbabilities
	}
	return nil
}

func (x *ObservationContext) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *ObservationContext) GetOutputs() []*Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *ObservationContext) GetTemporalInformation() *TemporalInformation {
	if x != nil {
		return x.TemporalInformation
	}
	return nil
}

// Message representing a possible state for an observation context
type PossibleState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ContextId   int32  `protobuf:"varint,2,opt,name=context_id,json=contextId,proto3" json:"context_id,omitempty"`
	State       string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *PossibleState) Reset() {
	*x = PossibleState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_models_observation_context_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PossibleState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PossibleState) ProtoMessage() {}

func (x *PossibleState) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_observation_context_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PossibleState.ProtoReflect.Descriptor instead.
func (*PossibleState) Descriptor() ([]byte, []int) {
	return file_proto_models_observation_context_proto_rawDescGZIP(), []int{3}
}

func (x *PossibleState) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PossibleState) GetContextId() int32 {
	if x != nil {
		return x.ContextId
	}
	return 0
}

func (x *PossibleState) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *PossibleState) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// A Conditional probability represents the probabilty that a
// state transition occurs given that a given intervention has taken place
type ConditionalProbability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InitialStateId   int32   `protobuf:"varint,2,opt,name=initial_state_id,json=initialStateId,proto3" json:"initial_state_id,omitempty"`       // a state type that is being monitored by an observation context. Indicates the first state in the transition T: S0-S1
	ResultingStateId int32   `protobuf:"varint,5,opt,name=resulting_state_id,json=resultingStateId,proto3" json:"resulting_state_id,omitempty"` // a state type that is being monitored by an observation context. Indicates the second state in the transition T: S0->S1
	InterventionId   int32   `protobuf:"varint,3,opt,name=intervention_id,json=interventionId,proto3" json:"intervention_id,omitempty"`         // The intervention that the condition probability is modeling i.e I in P(T|I)
	InterventionName string  `protobuf:"bytes,4,opt,name=intervention_name,json=interventionName,proto3" json:"intervention_name,omitempty"`    // External name for the intervention
	Probability      float32 `protobuf:"fixed32,6,opt,name=probability,proto3" json:"probability,omitempty"`                                    // The actual probability of the conditianal probability
	Description      string  `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`                                      // Should fit the form of "Given intervention {intervention_id}, there is a {probability} chance there is a transition from {initial_state_id} to {resulting_state_id}"
}

func (x *ConditionalProbability) Reset() {
	*x = ConditionalProbability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_models_observation_context_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionalProbability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionalProbability) ProtoMessage() {}

func (x *ConditionalProbability) ProtoReflect() protoreflect.Message {
	mi := &file_proto_models_observation_context_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionalProbability.ProtoReflect.Descriptor instead.
func (*ConditionalProbability) Descriptor() ([]byte, []int) {
	return file_proto_models_observation_context_proto_rawDescGZIP(), []int{4}
}

func (x *ConditionalProbability) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConditionalProbability) GetInitialStateId() int32 {
	if x != nil {
		return x.InitialStateId
	}
	return 0
}

func (x *ConditionalProbability) GetResultingStateId() int32 {
	if x != nil {
		return x.ResultingStateId
	}
	return 0
}

func (x *ConditionalProbability) GetInterventionId() int32 {
	if x != nil {
		return x.InterventionId
	}
	return 0
}

func (x *ConditionalProbability) GetInterventionName() string {
	if x != nil {
		return x.InterventionName
	}
	return ""
}

func (x *ConditionalProbability) GetProbability() float32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

func (x *ConditionalProbability) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

var File_proto_models_observation_context_proto protoreflect.FileDescriptor

var file_proto_models_observation_context_proto_rawDesc = []byte{
	0x0a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xc0, 0x01, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x08, 0x68, 0x61, 0x62, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x07, 0x68, 0x61, 0x62, 0x69, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x62,
	0x65, 0x6c, 0x69, 0x65, 0x66, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x75, 0x73, 0x61,
	0x6c, 0x5f, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x42, 0x65, 0x6c, 0x69, 0x65,
	0x66, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x22, 0xce, 0x01, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x6e, 0x65, 0x77, 0x5f, 0x68, 0x61, 0x62, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x48, 0x61, 0x62, 0x69, 0x74, 0x49, 0x64,
	0x12, 0x31, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x5f, 0x62,
	0x65, 0x6c, 0x69, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x11, 0x6e, 0x65, 0x77, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x42, 0x65, 0x6c, 0x69, 0x65,
	0x66, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x22, 0xf5, 0x02, 0x0a, 0x12, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x6f, 0x73,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x19, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x62, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x12, 0x21, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x0d,
	0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x02, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2a, 0x43, 0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x48, 0x41, 0x42, 0x49, 0x54, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x45, 0x4c,
	0x49, 0x45, 0x46, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55,
	0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x55, 0x53, 0x41, 0x4c, 0x5f, 0x42, 0x45,
	0x4c, 0x49, 0x45, 0x46, 0x10, 0x02, 0x2a, 0x40, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x45, 0x57, 0x5f, 0x48, 0x41, 0x42, 0x49, 0x54, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x45, 0x57, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x41, 0x4c, 0x5f,
	0x42, 0x45, 0x4c, 0x49, 0x45, 0x46, 0x10, 0x02, 0x42, 0x20, 0x5a, 0x1e, 0x65, 0x70, 0x69, 0x73,
	0x74, 0x65, 0x6d, 0x69, 0x63, 0x2d, 0x6d, 0x65, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2f, 0x70, 0x62, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_models_observation_context_proto_rawDescOnce sync.Once
	file_proto_models_observation_context_proto_rawDescData = file_proto_models_observation_context_proto_rawDesc
)

func file_proto_models_observation_context_proto_rawDescGZIP() []byte {
	file_proto_models_observation_context_proto_rawDescOnce.Do(func() {
		file_proto_models_observation_context_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_models_observation_context_proto_rawDescData)
	})
	return file_proto_models_observation_context_proto_rawDescData
}

var file_proto_models_observation_context_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_models_observation_context_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_models_observation_context_proto_goTypes = []interface{}{
	(InputType)(0),                 // 0: InputType
	(OutputType)(0),                // 1: OutputType
	(*Input)(nil),                  // 2: Input
	(*Output)(nil),                 // 3: Output
	(*ObservationContext)(nil),     // 4: ObservationContext
	(*PossibleState)(nil),          // 5: PossibleState
	(*ConditionalProbability)(nil), // 6: ConditionalProbability
	(*Resource)(nil),               // 7: Resource
	(*TemporalInformation)(nil),    // 8: TemporalInformation
}
var file_proto_models_observation_context_proto_depIdxs = []int32{
	0, // 0: Input.type:type_name -> InputType
	1, // 1: Output.type:type_name -> OutputType
	7, // 2: Output.resource:type_name -> Resource
	5, // 3: ObservationContext.possible_states:type_name -> PossibleState
	6, // 4: ObservationContext.conditional_probabilities:type_name -> ConditionalProbability
	2, // 5: ObservationContext.inputs:type_name -> Input
	3, // 6: ObservationContext.outputs:type_name -> Output
	8, // 7: ObservationContext.temporal_information:type_name -> TemporalInformation
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_proto_models_observation_context_proto_init() }
func file_proto_models_observation_context_proto_init() {
	if File_proto_models_observation_context_proto != nil {
		return
	}
	file_proto_models_source_proto_init()
	file_proto_models_temporal_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_models_observation_context_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_models_observation_context_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_models_observation_context_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_models_observation_context_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PossibleState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_models_observation_context_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionalProbability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_models_observation_context_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Input_HabitId)(nil),
		(*Input_BeliefSystemId)(nil),
		(*Input_CausalBeliefId)(nil),
	}
	file_proto_models_observation_context_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Output_Resource)(nil),
		(*Output_NewHabitId)(nil),
		(*Output_NewCausalBeliefId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_models_observation_context_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_models_observation_context_proto_goTypes,
		DependencyIndexes: file_proto_models_observation_context_proto_depIdxs,
		EnumInfos:         file_proto_models_observation_context_proto_enumTypes,
		MessageInfos:      file_proto_models_observation_context_proto_msgTypes,
	}.Build()
	File_proto_models_observation_context_proto = out.File
	file_proto_models_observation_context_proto_rawDesc = nil
	file_proto_models_observation_context_proto_goTypes = nil
	file_proto_models_observation_context_proto_depIdxs = nil
}
