// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/epistemic_me.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	pb "epistemic-me-backend/pb"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EpistemicMeServiceName is the fully-qualified name of the EpistemicMeService service.
	EpistemicMeServiceName = "EpistemicMeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EpistemicMeServiceCreateBeliefProcedure is the fully-qualified name of the EpistemicMeService's
	// CreateBelief RPC.
	EpistemicMeServiceCreateBeliefProcedure = "/EpistemicMeService/CreateBelief"
	// EpistemicMeServiceListBeliefsProcedure is the fully-qualified name of the EpistemicMeService's
	// ListBeliefs RPC.
	EpistemicMeServiceListBeliefsProcedure = "/EpistemicMeService/ListBeliefs"
	// EpistemicMeServiceCreateDialecticProcedure is the fully-qualified name of the
	// EpistemicMeService's CreateDialectic RPC.
	EpistemicMeServiceCreateDialecticProcedure = "/EpistemicMeService/CreateDialectic"
	// EpistemicMeServiceListDialecticsProcedure is the fully-qualified name of the EpistemicMeService's
	// ListDialectics RPC.
	EpistemicMeServiceListDialecticsProcedure = "/EpistemicMeService/ListDialectics"
	// EpistemicMeServiceUpdateDialecticProcedure is the fully-qualified name of the
	// EpistemicMeService's UpdateDialectic RPC.
	EpistemicMeServiceUpdateDialecticProcedure = "/EpistemicMeService/UpdateDialectic"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	epistemicMeServiceServiceDescriptor               = pb.File_proto_epistemic_me_proto.Services().ByName("EpistemicMeService")
	epistemicMeServiceCreateBeliefMethodDescriptor    = epistemicMeServiceServiceDescriptor.Methods().ByName("CreateBelief")
	epistemicMeServiceListBeliefsMethodDescriptor     = epistemicMeServiceServiceDescriptor.Methods().ByName("ListBeliefs")
	epistemicMeServiceCreateDialecticMethodDescriptor = epistemicMeServiceServiceDescriptor.Methods().ByName("CreateDialectic")
	epistemicMeServiceListDialecticsMethodDescriptor  = epistemicMeServiceServiceDescriptor.Methods().ByName("ListDialectics")
	epistemicMeServiceUpdateDialecticMethodDescriptor = epistemicMeServiceServiceDescriptor.Methods().ByName("UpdateDialectic")
)

// EpistemicMeServiceClient is a client for the EpistemicMeService service.
type EpistemicMeServiceClient interface {
	CreateBelief(context.Context, *connect.Request[pb.CreateBeliefRequest]) (*connect.Response[pb.CreateBeliefResponse], error)
	ListBeliefs(context.Context, *connect.Request[pb.ListBeliefsRequest]) (*connect.Response[pb.ListBeliefsResponse], error)
	CreateDialectic(context.Context, *connect.Request[pb.CreateDialecticRequest]) (*connect.Response[pb.CreateDialecticResponse], error)
	ListDialectics(context.Context, *connect.Request[pb.ListDialecticsRequest]) (*connect.Response[pb.ListDialecticsResponse], error)
	UpdateDialectic(context.Context, *connect.Request[pb.UpdateDialecticRequest]) (*connect.Response[pb.UpdateDialecticResponse], error)
}

// NewEpistemicMeServiceClient constructs a client for the EpistemicMeService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEpistemicMeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EpistemicMeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &epistemicMeServiceClient{
		createBelief: connect.NewClient[pb.CreateBeliefRequest, pb.CreateBeliefResponse](
			httpClient,
			baseURL+EpistemicMeServiceCreateBeliefProcedure,
			connect.WithSchema(epistemicMeServiceCreateBeliefMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listBeliefs: connect.NewClient[pb.ListBeliefsRequest, pb.ListBeliefsResponse](
			httpClient,
			baseURL+EpistemicMeServiceListBeliefsProcedure,
			connect.WithSchema(epistemicMeServiceListBeliefsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createDialectic: connect.NewClient[pb.CreateDialecticRequest, pb.CreateDialecticResponse](
			httpClient,
			baseURL+EpistemicMeServiceCreateDialecticProcedure,
			connect.WithSchema(epistemicMeServiceCreateDialecticMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listDialectics: connect.NewClient[pb.ListDialecticsRequest, pb.ListDialecticsResponse](
			httpClient,
			baseURL+EpistemicMeServiceListDialecticsProcedure,
			connect.WithSchema(epistemicMeServiceListDialecticsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateDialectic: connect.NewClient[pb.UpdateDialecticRequest, pb.UpdateDialecticResponse](
			httpClient,
			baseURL+EpistemicMeServiceUpdateDialecticProcedure,
			connect.WithSchema(epistemicMeServiceUpdateDialecticMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// epistemicMeServiceClient implements EpistemicMeServiceClient.
type epistemicMeServiceClient struct {
	createBelief    *connect.Client[pb.CreateBeliefRequest, pb.CreateBeliefResponse]
	listBeliefs     *connect.Client[pb.ListBeliefsRequest, pb.ListBeliefsResponse]
	createDialectic *connect.Client[pb.CreateDialecticRequest, pb.CreateDialecticResponse]
	listDialectics  *connect.Client[pb.ListDialecticsRequest, pb.ListDialecticsResponse]
	updateDialectic *connect.Client[pb.UpdateDialecticRequest, pb.UpdateDialecticResponse]
}

// CreateBelief calls EpistemicMeService.CreateBelief.
func (c *epistemicMeServiceClient) CreateBelief(ctx context.Context, req *connect.Request[pb.CreateBeliefRequest]) (*connect.Response[pb.CreateBeliefResponse], error) {
	return c.createBelief.CallUnary(ctx, req)
}

// ListBeliefs calls EpistemicMeService.ListBeliefs.
func (c *epistemicMeServiceClient) ListBeliefs(ctx context.Context, req *connect.Request[pb.ListBeliefsRequest]) (*connect.Response[pb.ListBeliefsResponse], error) {
	return c.listBeliefs.CallUnary(ctx, req)
}

// CreateDialectic calls EpistemicMeService.CreateDialectic.
func (c *epistemicMeServiceClient) CreateDialectic(ctx context.Context, req *connect.Request[pb.CreateDialecticRequest]) (*connect.Response[pb.CreateDialecticResponse], error) {
	return c.createDialectic.CallUnary(ctx, req)
}

// ListDialectics calls EpistemicMeService.ListDialectics.
func (c *epistemicMeServiceClient) ListDialectics(ctx context.Context, req *connect.Request[pb.ListDialecticsRequest]) (*connect.Response[pb.ListDialecticsResponse], error) {
	return c.listDialectics.CallUnary(ctx, req)
}

// UpdateDialectic calls EpistemicMeService.UpdateDialectic.
func (c *epistemicMeServiceClient) UpdateDialectic(ctx context.Context, req *connect.Request[pb.UpdateDialecticRequest]) (*connect.Response[pb.UpdateDialecticResponse], error) {
	return c.updateDialectic.CallUnary(ctx, req)
}

// EpistemicMeServiceHandler is an implementation of the EpistemicMeService service.
type EpistemicMeServiceHandler interface {
	CreateBelief(context.Context, *connect.Request[pb.CreateBeliefRequest]) (*connect.Response[pb.CreateBeliefResponse], error)
	ListBeliefs(context.Context, *connect.Request[pb.ListBeliefsRequest]) (*connect.Response[pb.ListBeliefsResponse], error)
	CreateDialectic(context.Context, *connect.Request[pb.CreateDialecticRequest]) (*connect.Response[pb.CreateDialecticResponse], error)
	ListDialectics(context.Context, *connect.Request[pb.ListDialecticsRequest]) (*connect.Response[pb.ListDialecticsResponse], error)
	UpdateDialectic(context.Context, *connect.Request[pb.UpdateDialecticRequest]) (*connect.Response[pb.UpdateDialecticResponse], error)
}

// NewEpistemicMeServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEpistemicMeServiceHandler(svc EpistemicMeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	epistemicMeServiceCreateBeliefHandler := connect.NewUnaryHandler(
		EpistemicMeServiceCreateBeliefProcedure,
		svc.CreateBelief,
		connect.WithSchema(epistemicMeServiceCreateBeliefMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	epistemicMeServiceListBeliefsHandler := connect.NewUnaryHandler(
		EpistemicMeServiceListBeliefsProcedure,
		svc.ListBeliefs,
		connect.WithSchema(epistemicMeServiceListBeliefsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	epistemicMeServiceCreateDialecticHandler := connect.NewUnaryHandler(
		EpistemicMeServiceCreateDialecticProcedure,
		svc.CreateDialectic,
		connect.WithSchema(epistemicMeServiceCreateDialecticMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	epistemicMeServiceListDialecticsHandler := connect.NewUnaryHandler(
		EpistemicMeServiceListDialecticsProcedure,
		svc.ListDialectics,
		connect.WithSchema(epistemicMeServiceListDialecticsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	epistemicMeServiceUpdateDialecticHandler := connect.NewUnaryHandler(
		EpistemicMeServiceUpdateDialecticProcedure,
		svc.UpdateDialectic,
		connect.WithSchema(epistemicMeServiceUpdateDialecticMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/EpistemicMeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EpistemicMeServiceCreateBeliefProcedure:
			epistemicMeServiceCreateBeliefHandler.ServeHTTP(w, r)
		case EpistemicMeServiceListBeliefsProcedure:
			epistemicMeServiceListBeliefsHandler.ServeHTTP(w, r)
		case EpistemicMeServiceCreateDialecticProcedure:
			epistemicMeServiceCreateDialecticHandler.ServeHTTP(w, r)
		case EpistemicMeServiceListDialecticsProcedure:
			epistemicMeServiceListDialecticsHandler.ServeHTTP(w, r)
		case EpistemicMeServiceUpdateDialecticProcedure:
			epistemicMeServiceUpdateDialecticHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEpistemicMeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEpistemicMeServiceHandler struct{}

func (UnimplementedEpistemicMeServiceHandler) CreateBelief(context.Context, *connect.Request[pb.CreateBeliefRequest]) (*connect.Response[pb.CreateBeliefResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("EpistemicMeService.CreateBelief is not implemented"))
}

func (UnimplementedEpistemicMeServiceHandler) ListBeliefs(context.Context, *connect.Request[pb.ListBeliefsRequest]) (*connect.Response[pb.ListBeliefsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("EpistemicMeService.ListBeliefs is not implemented"))
}

func (UnimplementedEpistemicMeServiceHandler) CreateDialectic(context.Context, *connect.Request[pb.CreateDialecticRequest]) (*connect.Response[pb.CreateDialecticResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("EpistemicMeService.CreateDialectic is not implemented"))
}

func (UnimplementedEpistemicMeServiceHandler) ListDialectics(context.Context, *connect.Request[pb.ListDialecticsRequest]) (*connect.Response[pb.ListDialecticsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("EpistemicMeService.ListDialectics is not implemented"))
}

func (UnimplementedEpistemicMeServiceHandler) UpdateDialectic(context.Context, *connect.Request[pb.UpdateDialecticRequest]) (*connect.Response[pb.UpdateDialecticResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("EpistemicMeService.UpdateDialectic is not implemented"))
}
